<?php

use App\Models\Vulnerability;
use App\Models\Es;

class VulnerabilityController extends Base
{
    protected $model;
    protected $es;
    protected $num = 45;

    public function init()
    {
        parent::init();
        $this->model = new Vulnerability();
        $this->es = new Es();
        $this->checkAuth($this->num);

    }

    //资产分类
    public function getSensorTypesAction()
    {
        $data = $this->model->getSensorTypes();
        jsonResult($data);
    }

    //资产系统
    public function getSensorSystemAction()
    {
        $data = $this->model->getSensorSystem();
       
        $udpHost = $this->model->getUdpHost();

        foreach ($data as $a => $b){
            foreach ($udpHost as $c => $d){
                if($b['ip'] == $d['ip']){
                    unset($data[$a]);
                }
            }
        }
        $data = array_values($data);

        foreach ($data as $k => $v) {
            if ($v['name'] == '未知') {
                unset($data[$k]);
            }
        }
        if (count($data) == 11) {
            unset($data[10]);
        }
        $res = array_values($data);
        if (!empty($res)) {
            jsonResult($res);
        } else {
            jsonResult([['name' => '暂无数据', 'value' => 0]]);
        }
    }

    public function getSystem()
    {
        $data = $this->model->getSensorSystem();
        $udpHost = $this->model->getUdpHost();

        foreach ($data as $a => $b){
            foreach ($udpHost as $c => $d){
                if($b['ip'] == $d['ip']){
                    unset($data[$a]);
                }
            }
        }
        $data = array_values($data);

        foreach ($data as $k => $v) {
            if ($v['name'] == '未知') {
                unset($data[$k]);
            }
        }
        if (count($data) == 11) {
            unset($data[10]);
        }
        return array_values($data);
    }


    //资产服务
    public function getSensorServiceAction()
    {
        $data = $this->model->getSensorService();
        jsonResult($data);
    }

    public function getService()
    {
        $data = $this->model->getSensorService();
        $udpHost = $this->model->getUdpHost();

        foreach ($data as $a => $b){
            foreach ($udpHost as $c => $d){
                if($b['ip'] == $d['ip']){
                    unset($data[$a]);
                }
            }
        }
        $data = array_values($data);
        return $data;
    }


//    //系统列表
//    public function getSystemListAction()
//    {
//        $res = $this->getSystem();
//        foreach ($res as $k => $v) {
//
//            $params['query']['bool']['should'][]['match'] = ['vuln_desc' => $v['name']];
//            $params['query']['bool']['should'][]['match'] = ['vuln_name' => $v['name']];
//            $params['size'] = 0;
//
//            $data = $this->Format($this->es->query('andi-vuln-database', $params));
//
//            $res[$k]['value'] = $data;
//            $res[$k]['level'] = $this->level($res[$k]['value']);
//            unset($params);
//        }
//
//        //排序
//        $flag = array();
//        foreach ($res as $v) {
//            $flag[] = $v['value'];
//        }
//        array_multisort($flag, SORT_DESC, $res);
//
//        $result['total_num'] = count($res);
//        $result['total_page'] = ceil($result['total_num'] / 50);
//        $database = $this->splitArray($res,$result['total_page']);
//
//        $page = input('get.page', 1);
//        $result['list'] = $database[$page - 1];
//
//        jsonResult($result);
//
//    }
//
//    //服务列表
//    public function getServiceListAction()
//    {
//        $res = $this->getService();
//
//        foreach ($res as $k => $v) {
//
//            $params['query']['bool']['should'][]['match'] = ['vuln_desc' => $v['name']];
//            $params['query']['bool']['should'][]['match'] = ['vuln_name' => $v['name']];
//            $params['size'] = 0;
//
//            $data = $this->Format($this->es->query('andi-vuln-database', $params));
//
//            $res[$k]['value'] = $data;
//            $res[$k]['level'] = $this->level($res[$k]['value']);
//            unset($params);
//        }
//
//        //排序
//        $flag = array();
//        foreach ($res as $v) {
//            $flag[] = $v['value'];
//        }
//        array_multisort($flag, SORT_DESC, $res);
//
//        $result['total_num'] = count($res);
//        $result['total_page'] = ceil($result['total_num'] / 50);
//        $database = $this->splitArray($res,$result['total_page']);
//
//        $page = input('get.page', 1);
//        $result['list'] = $database[$page - 1];
//
//        jsonResult($result);
//
//    }
//
//    //漏洞列表
//    public function getVulAction()
//    {
//        $params['sort']['update_time'] = ['order' => 'desc'];
//        $params['size'] = 50;
//
//        $data = $this->splitArray($this->data($this->es->query('andi-vuln-database', $params)), 1);
//         $data = $this->getInfo($data[0]);
//        $res['total_num'] = 50;
//        $res['total_page'] = 1;
//
//        $page = input('get.page', 1);
//        $res['list'] = $data;
//
//        jsonResult($res);
//
//    }
//
//    //脆弱性
//    public function vulnerabListAction()
//    {
//        $hosts = $this->model->getAllHost();
//        //过滤无系统无服务的  就不查了
//        foreach ($hosts as $k => $v) {
//            if (empty($v['value']) && empty($v['service'])) {
//                unset($hosts[$k]);
//            }
//        }
//
//        foreach ($hosts as $key => $val) {
//
//            $hosts[$key]['system_service_sum'] = 0;
//            //系统
//            if (!empty($val['value'])) {
//
//                $params['query']['bool']['should'][]['match'] = ['vuln_desc' => $val['value']];
//                $params['query']['bool']['should'][]['match'] = ['vuln_name' => $val['value']];
//                $params['size'] = 0;
//
//                $data = $this->Format($this->es->query('andi-vuln-database', $params));
//                // $hosts[$key]['system_value'] = $data;
//                $hosts[$key]['system_service_sum'] += $data;
//
//                $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//
//                unset($params);
//
//            } else {
//                //  $hosts[$key]['system_value'] = 0;
//                $hosts[$key]['system_service_sum'] += 0;
//                $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//            }
//
//            //服务
//            if (!empty($val['service'])) {
//
//                $service = json_decode($val['service'], 1);
//
//                if ($service == null) {
//                    //  $hosts[$key]['service_value'] = 0;
//                    $hosts[$key]['system_service_sum'] += 0;
//                    $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//                    continue;
//                } else {
//                    $a = [];
//                    foreach ($service as $kk => $vv) {
//                        if (!empty($vv['product'])) {
//                            array_push($a, $vv['product']);
//                        }
//                    }
//                    $str = implode(',', $a);
//
//                    if (!empty($str)) {
//
//                        $params['query']['bool']['should'][]['match'] = ['vuln_desc' => $str];
//                        $params['query']['bool']['should'][]['match'] = ['vuln_name' => $str];
//                        $params['size'] = 0;
//
//                        $data = $this->Format($this->es->query('andi-vuln-database', $params));
//                        //  $hosts[$key]['service_value'] = $data;
//                        $hosts[$key]['system_service_sum'] += $data;
//                        $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//                        unset($params);
//                    } else {
//                        // $hosts[$key]['service_value'] = 0;
//                        $hosts[$key]['system_service_sum'] += 0;
//                        $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//                    }
//                }
//
//            } else {
//                //  $hosts[$key]['service_value'] = 0;
//                $hosts[$key]['system_service_sum'] += 0;
//                $hosts[$key]['level'] = $this->level($hosts[$key]['system_service_sum']);
//            }
//
//        }
//
//        //排序
//        $flag = array();
//        foreach ($hosts as $v) {
//            $flag[] = $v['system_service_sum'];
//        }
//        array_multisort($flag, SORT_DESC, $hosts);
//
//        $res['total_num'] = count($hosts);
//        $res['total_page'] = ceil($res['total_num'] / 50);
//        $database = $this->splitArray($hosts,$res['total_page']);
//
//        $page = input('get.page', 1);
//        $res['list'] = $database[$page - 1];
//
//        jsonResult($res);
//
//    }
//
//    //获取资产脆弱性详情
//    public function getSensorVulnerabAction()
//    {
//
//    }
//

    //系统列表
    public function getSystemListAction()
    {
        $res = $this->getSystem();

        foreach ($res as $k => $v) {

            $params1['query']['wildcard']['vuln_desc'] = "*" . $v['name'] . "*";
            $params1['size'] = 0;

            $params2['query']['wildcard']['vuln_name'] = "*" . $v['name'] . "*";
            $params2['size'] = 0;

            $data1 = $this->Format($this->es->query('andi-vuln-database', $params1));
            $data2 = $this->Format($this->es->query('andi-vuln-database', $params2));

            $data = $data1 + $data2;
            $res[$k]['value'] = $data;
            $res[$k]['level'] = $this->level($res[$k]['value']);
            unset($params1);
            unset($params2);
            unset($data);
        }

        //排序
        $flag = array();
        foreach ($res as $v) {
            $flag[] = $v['value'];
        }
        array_multisort($flag, SORT_DESC, $res);

        $result['total_num'] = count($res);
        $result['total_page'] = ceil(count($res) / 50);
        $database = $this->splitArray($res, $result['total_page']);

        $page = input('get.page', 1);
        $result['list'] = $database[$page - 1];
        
        if (empty($result['list']) || $result['list'][0]['name'] == '暂无数据') {
            $result['total_num'] = 0;
            $result['total_page'] = 0;
            $result['list'] = [];
        }

        jsonResult($result);

    }

    //服务列表
    public function getServiceListAction()
    {
        $res = $this->getService();

        foreach ($res as $k => $v) {

            $params1['query']['wildcard']['vuln_desc'] = "*" . $v['name'] . "*";
            $params1['size'] = 0;

            $params2['query']['wildcard']['vuln_name'] = "*" . $v['name'] . "*";
            $params2['size'] = 0;

            $data1 = $this->Format($this->es->query('andi-vuln-database', $params1));
            $data2 = $this->Format($this->es->query('andi-vuln-database', $params2));

            $data = $data1 + $data2;
            $res[$k]['value'] = $data;
            $res[$k]['level'] = $this->level($res[$k]['value']);
            unset($params1);
            unset($params2);
            unset($data);
        }

        //排序
        $flag = array();
        foreach ($res as $v) {
            $flag[] = $v['value'];
        }
        array_multisort($flag, SORT_DESC, $res);

        $result['total_num'] = count($res);
        $result['total_page'] = ceil($result['total_num'] / 50);
        $database = $this->splitArray($res, $result['total_page']);

        $page = input('get.page', 1);
        $result['list'] = $database[$page - 1];

        if (empty($result['list'])) {
            $result['total_num'] = 0;
            $result['total_page'] = 0;
            $result['list'] = [];
        }

        foreach ($result['list'] as $k => $v) {
            if ($v['name'] == '暂无数据') {
                jsonResult([]);
            }
        }
        jsonResult($result);

    }

    //漏洞列表
    public function getVulAction()
    {
        $params['sort']['update_time'] = ['order' => 'desc'];
        $params['size'] = 50;

        $data = $this->splitArray($this->data($this->es->query('andi-vuln-database', $params)), 1);
        $data = $this->getInfo($data[0]);

        if (!empty($data)) {
            $res['total_num'] = 50;
            $res['total_page'] = 1;
            $res['list'] = $data;
        } else {
            $res['total_num'] = 0;
            $res['total_page'] = 0;
            $res['list'] = [];
        }


        jsonResult($res);

    }

    //资产脆弱性
    public function vulnerabListAction()
    {
        $redis = new \phpredis();

        if ($redis->get('vulnerabList')) {

            $hosts = json_decode($redis->get('vulnerabList'), 1);
            $udpHost = $this->model->getUdpHost();
            foreach ($hosts as $a => $b){
                foreach ($udpHost as $c => $d){
                    if($b['ip'] == $d['ip']){
                        unset($hosts[$a]);
                    }
                }
            }
            $hosts = array_values($hosts);
            foreach ($hosts as $key => $val) {

                $num = 0;

                if (empty($val['value']) && empty($val['service'])) {
                    $hosts[$key]['system_service_sum'] = $num;
                }


                //系统
                if ((!empty($val['value'])) && (strlen($val['value']) > 7)) {

                    $params1['query']['wildcard']['vuln_desc'] = "*" . $val['value'] . "*";
                    $params1['size'] = 0;

                    $params2['query']['wildcard']['vuln_name'] = "*" . $val['value'] . "*";
                    $params2['size'] = 0;

                    $data1 = $this->Format($this->es->query('andi-vuln-database', $params1));
                    $data2 = $this->Format($this->es->query('andi-vuln-database', $params2));

                    $data = $data1 + $data2;
                    $num += $data;

                    unset($params1);
                    unset($params2);
                    unset($data);

                } else {

                    $num += 0;

                }

                //服务
                if (!empty($val['service'])) {

                    $service = json_decode($val['service'], 1);

                    if ($service == null) {
                        $hosts[$key]['system_service_sum'] = $num;
                        $hosts[$key]['level'] = $this->level($num);
                        continue;
                    } else {
                        $params1['query']['bool']['should'] = [];
                        $params1['size'] = 0;
                        $params2['query']['bool']['should'] = [];
                        $params2['size'] = 0;
                        foreach ($service as $kk => $vv) {

                            if (!empty($vv['product'])) {

                                array_push($params1['query']['bool']['should'], ['wildcard' => ['vuln_desc' => '*' . $vv['product'] . '*']]);
                                array_push($params2['query']['bool']['should'], ['wildcard' => ['vuln_name' => '*' . $vv['product'] . '*']]);
                            }
                        }

                        //wildcard 不支持双字段查询
                        if (!empty($params1)) {

                            $data3 = $this->Format($this->es->query('andi-vuln-database', $params1));
                            $num += $data3;
                            unset($params1);

                        } else {
                            $num += 0;
                        }

                        if (!empty($params2)) {

                            $data4 = $this->Format($this->es->query('andi-vuln-database', $params2));
                            $num += $data4;
                            unset($params2);

                        } else {
                            $num += 0;
                        }
                    }

                } else {
                    $num += 0;

                }
                $hosts[$key]['system_service_sum'] = $num;
                $hosts[$key]['level'] = $this->level($num);
            }

            //排序
            $flag = array();
            foreach ($hosts as $v) {
                $flag[] = $v['system_service_sum'];
            }
            array_multisort($flag, SORT_DESC, $hosts);
            $redis->set('vulnerabList', json_encode($hosts, 256), 0, 0, 60);
        } else {
            $hosts = $this->model->getAllHost();
            $udpHost = $this->model->getUdpHost();
          //  var_dump($hosts);
          //  var_dump($udpHost);
            foreach ($hosts as $a => $b){
                foreach ($udpHost as $c => $d){
                    if($b['ip'] == $d['ip']){
                       unset($hosts[$a]);
                    }
                }
            }
            $hosts = array_values($hosts);
        //    var_dump($hosts);die;
            //过滤无系统无服务的  就不查了
//        foreach ($hosts as $k => $v) {
//            if (empty($v['value']) && empty($v['service'])) {
//                unset($hosts[$k]);
//            }
//        }

            foreach ($hosts as $key => $val) {

                $num = 0;

                if (empty($val['value']) && empty($val['service'])) {
                    $hosts[$key]['system_service_sum'] = $num;
                }


                //系统
                if (!empty($val['value'])) {

                    $params1['query']['wildcard']['vuln_desc'] = "*" . $val['value'] . "*";
                    $params1['size'] = 0;

                    $params2['query']['wildcard']['vuln_name'] = "*" . $val['value'] . "*";
                    $params2['size'] = 0;

                    $data1 = $this->Format($this->es->query('andi-vuln-database', $params1));
                    $data2 = $this->Format($this->es->query('andi-vuln-database', $params2));

                    $data = $data1 + $data2;
                    $num += $data;

                    unset($params1);
                    unset($params2);
                    unset($data);

                } else {

                    $num += 0;

                }

                //服务
                if (!empty($val['service'])) {

                    $service = json_decode($val['service'], 1);

                    if ($service == null) {
                        $hosts[$key]['system_service_sum'] = $num;
                        $hosts[$key]['level'] = $this->level($num);
                        continue;
                    } else {
                        $params1['query']['bool']['should'] = [];
                        $params1['size'] = 0;
                        $params2['query']['bool']['should'] = [];
                        $params2['size'] = 0;
                        foreach ($service as $kk => $vv) {

                            if (!empty($vv['product'])) {

                                array_push($params1['query']['bool']['should'], ['wildcard' => ['vuln_desc' => '*' . $vv['product'] . '*']]);
                                array_push($params2['query']['bool']['should'], ['wildcard' => ['vuln_name' => '*' . $vv['product'] . '*']]);
                            }
                        }

                        //wildcard 不支持双字段查询
                        if (!empty($params1)) {

                            $data3 = $this->Format($this->es->query('andi-vuln-database', $params1));
                            $num += $data3;
                            unset($params1);

                        } else {
                            $num += 0;
                        }

                        if (!empty($params2)) {

                            $data4 = $this->Format($this->es->query('andi-vuln-database', $params2));
                            $num += $data4;
                            unset($params2);

                        } else {
                            $num += 0;
                        }
                    }

                } else {
                    $num += 0;

                }
                $hosts[$key]['system_service_sum'] = $num;
                $hosts[$key]['level'] = $this->level($num);
            }

            //排序
            $flag = array();
            foreach ($hosts as $v) {
                $flag[] = $v['system_service_sum'];
            }
            array_multisort($flag, SORT_DESC, $hosts);
            $redis->set('vulnerabList', json_encode($hosts, 256), 0, 0, 60);
        }

        $res['total_num'] = count($hosts);
        $res['total_page'] = ceil($res['total_num'] / 50);
        $database = $this->split($hosts, 50);
        $page = input('post.page', 1);
        $res['list'] = $database[$page - 1];

        if (empty($res['list'])) {
            $res['total_num'] = 0;
            $res['total_page'] = 0;
            $res['list'] = [];
        }

        jsonResult($res);

    }

    //获取资产脆弱性详情
    public function getSensorVulnerabAction()
    {
        $data = input('post.');
    }


    private function Format($data)
    {
        return $data['hits']['total']['value'];
    }

    private function data($data)
    {
        return $data['hits']['hits'];
    }

    /**
     *
     * 把数组按指定的个数分隔
     * @param array $array 要分割的数组
     * @param int $groupNum 分的组数
     */
    private function splitArray($array, $groupNum)
    {
        if (empty($array)) return array();
        //数组的总长度
        $allLength = count($array);
        //个数
        $groupNum = intval($groupNum);
        //取余
        $yu = (int)($allLength % $groupNum);
        //取整
        $zheng = (int)(($allLength - $yu) / $groupNum);
        //结果集
        $result = array();
        //算出小数组可以有几个元素
        $s = array();
        if ($yu > 0) {
            for ($i = 0; $i < $groupNum; $i++) {
                $s[$i] = $zheng;
                if ($yu >= 1) {
                    $s[$i] = $s[$i] + 1;
                }
                $yu = $yu - 1;
            }
        } else {
            return array_chunk($array, $zheng);
        }
        foreach ($s as $k => $v) {
            for ($i = 0; $i < $v; $i++) {
                $result[$k][] = array_shift($array);
            }
        }
        return $result;
    }


    //数组按指定10个为一组的分割数组
    public function split($data, $num = 5)
    {

        $arrRet = array();
        if (!isset($data) || empty($data)) {
            return $arrRet;
        }

        $iCount = count($data) / $num;
        if (!is_int($iCount)) {
            $iCount = ceil($iCount);
        } else {
            $iCount += 1;
        }
        for ($i = 0; $i < $iCount; ++$i) {
            $arrInfos = array_slice($data, $i * $num, $num);
            if (empty($arrInfos)) {
                continue;
            }
            $arrRet[] = $arrInfos;
            unset($arrInfos);
        }

        return $arrRet;

    }


    //等级
    private function level($num)
    {
        if ($num <= 10) {
            return '低';
        } elseif (10 < $num && $num <= 20) {
            return '中';
        } elseif ($num > 20) {
            return '高';
        }

    }

    //漏洞获取详情--漏洞列表用
    private function getInfo($data)
    {
        $arr = [];
        foreach ($data as $k => $v) {
            array_push($arr, $v['_source']);
        }
        return $arr;
    }

    //漏洞获取详情--单个漏洞用
    private function getOneInfo($data)
    {
        if (!empty($data)) {
            foreach ($data as $k => $v) {
                if ($k == '_source') {
                    $arr = $v;
                }
            }
        } else {
            $arr = '';
        }

        return $arr;
    }

    public function getOneSensorInfoAction()
    {
        $data = input('post.');
        $host_id = $data['host_id'];  //资产ip
        $result = $this->model->getOneSensorInfo($host_id);
        $result['ip'] = $data['ip'];
        $result['hostname'] = $data['hostname'];
        $result['system_service_sum'] = $data['system_service_sum'];
        $result['level'] = $data['level'];
        $result['system'] = $data['value'];
        foreach ($result as $k => $v) {
            if (empty($v)) {
                $result[$k] = '';
            }
        }
        $info['basic_info'] = $result;

        //操作系统
        $system = $data['value'];
        if (!empty($system)) {
            $system_num = 0;
            $system_info = [];
            $params1['query']['wildcard']['vuln_desc'] = "*" . $system . "*";
            $params1['size'] = 10;

            $params2['query']['wildcard']['vuln_name'] = "*" . $system . "*";
            $params2['size'] = 10;

            $system_data1 = $this->es->query('andi-vuln-database', $params1);

            if (!empty($system_data1['hits']['hits'])) {
                $system_num += $this->Format($system_data1);
                array_push($system_info, $system_data1['hits']['hits']);
            }

            $system_data2 = $this->es->query('andi-vuln-database', $params2);
            if (!empty($system_data2['hits']['hits'])) {
                $system_num += $this->Format($system_data2);
                array_push($system_info, $system_data2['hits']['hits']);
            }

            //     $info['system']['system_name'] = $system;
            //     $info['system']['system_num'] = $system_num;
            if ($system_num == 0) {
                $info['system']['system_info'] = [];
            } else {

                $sou = [];
                if (!empty($system_info)) {
                    foreach ($system_info as $kka => $vva) {
                        foreach ($vva as $kkaa => $vvaa) {
                            array_push($sou, $vvaa);
                        }
                    }
                }
                $sou = array_slice($sou, 10);
                $dee = [];
                foreach ($sou as $kkey => $vval) {
                    $dee[] = $this->getOneInfo($vval);
                }

                //$info['system']['system_info'] = $this->getOneInfo($system_info[0]);
                if (!empty($dee)) {
                    $info['system']['system_info'] = $dee;
                } else {
                    $info['system']['system_info'] = [];
                }

            }

        } else {
            //    $info['system']['system_name'] = '';
            //     $info['system']['system_num'] = 0;
            $info['system']['system_info'] = [];
        }

        //开放的服务
        $service = stripslashes(htmlspecialchars_decode($data['service']));

        if (!empty($service)) {

            $service_num = 0;
            $service_info = [];
            $ser = json_decode($service, 1);

            foreach ($ser as $k => $v) {
                $num = 0;
                $arr = [];
                if (!empty($v['product'])) {

                    $params3['query']['wildcard']['vuln_desc'] = "*" . $v['product'] . "*";
                    $params3['size'] = 10;

                    $params4['query']['wildcard']['vuln_name'] = "*" . $v['product'] . "*";
                    $params4['size'] = 10;

                    $system_data3 = $this->es->query('andi-vuln-database', $params3);
                    //var_dump($system_data3);
                    if (!empty($system_data3['hits']['hits'])) {

                        $service_num += $this->Format($system_data3);  //总数
                        //  $service_info[$v['product']]['num'] = $this->Format($system_data3);
                        $num += $this->Format($system_data3);    //当前服务数
                        array_push($arr, $system_data3['hits']['hits']);
                    }

                    $system_data4 = $this->es->query('andi-vuln-database', $params4);
                    //var_dump($system_data4);
                    if (!empty($system_data4['hits']['hits'])) {

                        $service_num += $this->Format($system_data4);
                        $num += $this->Format($system_data4);
                        array_push($arr, $system_data4['hits']['hits']);
                    }
                    $source = [];
                    if (!empty($arr)) {
                        foreach ($arr as $kkk => $vvv) {
                            foreach ($vvv as $kkkk => $vvvv) {
                                array_push($source, $vvvv);
                            }
                        }
                    }
                    $ser = array_slice($source, 10);
                    $de = [];
                    foreach ($ser as $kk => $vv) {
                        $de[] = $this->getOneInfo($vv);
                    }
                    //$service_info[$v['product']]['info'] = $this->getOneInfo($arr[0]);
                    // $service_info[$v['product']]['num'] = $num;
                    $service_info[$v['product']] = $de;

                }
            }

            //  $info['service']['sum'] = $service_num;
            // $info['service']['info'] = $service_info;

            if (!empty(array_reverse($service_info))) {
                $info['service'] = $service_info;
            } else {
                $info['service'] = [];
            }

        } else {
            $info['service'] = [];
        }

        jsonResult($info);
    }
}

?>