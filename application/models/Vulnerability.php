<?php

namespace App\Models;

class Vulnerability extends Model
{

    public function getSensorTypes()
    {
        $field = "c.name,count(a.id) as value,INET6_NTOA(d.ip) as ip";
        $join1 = "host_types b on a.id = b.host_id";
        $join2 = "device_types c on b.type = c.class and b.subtype = c.id";
        $join3 = "host_ip d on a.id = d.host_id";
        $data = $this->table('host')->alias('a')->field($field)->join($join1, 'left')->join($join2, 'left')->join($join3, 'left')->group('c.name')->order('value desc')->limit(0, 10)->select();

        //过滤掉平台 采集器 监测审计
        $da = $this->table('udp_sensor')->field('ip')->select();

        foreach ($data as $a => $b) {
            foreach ($da as $c => $d) {
                if ($b['ip'] == $d['ip']) {
                    unset($data[$a]);
                }
            }
        }
        $data = array_values($data);

        foreach ($data as $k => &$v) {
            if (empty($v['name'])) {
                $v['name'] = '未知';
            }
        }
        if (!empty($data)) {
            return $data;
        } else {
            return [['name' => '暂无数据', 'value' => 0]];
        }
    }

    public function getSensorSystem()
    {
        //过滤掉平台采集器
        $udp_ids = $this->table('udp_sensor')->field('host_id')->select();
        $str = "not in (";
        foreach ($udp_ids as $k => $v){
            $str = $str."unhex('".$v['host_id']."'),";
        }
        $str = rtrim($str,',');
        $str = $str.")";

        $field = "b.value as name,count(a.id) as value,INET6_NTOA(c.ip) as ip";
        $join1 = "host_properties b on a.id = b.host_id";
        $join2 = "host_ip c on a.id = c.host_id";
        $data = $this->table('host')->alias('a')->field($field)->where('b.value != \'\'')->join($join1, 'left')->join($join2, 'left')->where(['a.id'=>['exp',"{$str}"]])->group('b.value')->order('value desc')->limit(0, 11)->select();
        if (!empty($data)) {
            return $data;
        } else {
            return [['name' => '暂无数据', 'value' => 0]];
        }
    }

    public function getSensorService()
    {
        $field = "b.service,INET6_NTOA(c.ip) as ip";
        $join1 = "host_services b on a.id = b.host_id";
        $join2 = "host_ip c on a.id = c.host_id";
        $data = $this->table('host')->alias('a')->field($field)->join($join1, 'left')->join($join2, 'left')->select();

        //过滤掉平台 采集器 监测审计
        $da = $this->table('udp_sensor')->field('ip')->select();

        foreach ($data as $a => $b) {
            foreach ($da as $c => $d) {
                if ($b['ip'] == $d['ip']) {
                    unset($data[$a]);
                }
            }
        }
        $data = array_values($data);


        $service = [];
        foreach ($data as $k => &$v) {
            if (!\Tools::isEmpty($v['service'])) {
                $info = json_decode($v['service'], 1);
                foreach ($info as $kk => $vv) {
                    if (!\Tools::isEmpty($vv['product'])) {
                        array_push($service, $vv['product']);
                    }
                }
            }
        }

        $da = [];
        foreach (array_count_values($service) as $key => $value) {
            $res['name'] = $key;
            $res['value'] = $value;
            array_push($da, $res);
        }
        //排序
        $flag = array();
        foreach ($da as $v) {
            $flag[] = $v['value'];
        }
        array_multisort($flag, SORT_DESC, $da);
        $da = array_slice($da, 0, 10);

        if (!empty($da)) {
            return $da;
        } else {
            return [['name' => '暂无数据', 'value' => 0]];
        }
    }

    public function getAllHost()
    {
        $field = "hex(a.ctx) as ctx,hex(a.id) as host_id,a.hostname,b.value,c.service,INET6_NTOA(d.ip) as ip";
        $join1 = "host_properties b on a.id = b.host_id";
        $join2 = "host_services c on a.id = c.host_id";
        $join3 = "host_ip d on a.id = d.host_id";
        $data = $this->table('host')->alias('a')->field($field)->join($join1, 'left')->join($join2, 'left')->join($join3, 'left')->select();
        return $data;
    }

    public function getSensor($id)
    {
        $field = "c.name";
        $where['a.id'] = ['exp', "=unhex('{$id}')"];
        $join1 = 'host_sensor_reference b on a.id=b.host_id';
        $join2 = 'udp_sensor c on unhex(c.host_id) = b.sensor_id';
        $data = $this->table('host')->alias('a')->field($field)->join($join1, 'left')->join($join2, 'left')->where($where)->find();
        return $data['name'];
    }

    public function getUdpHost()
    {
        $data = $this->table('udp_sensor')->field('ip')->select();
        return $data;
    }

    public function getOneSensorInfo($host_id)
    {
        $field = 'a.asset,a.persistence,a.country,a.lat,a.lon,a.descr,hex(d.mac) as mac,c.name,f.name';
        $join1 = "host_types b on a.id = b.host_id";
        $join2 = "device_types c on b.type = c.class and b.subtype = c.id";
        $join3 = 'host_ip d on a.id=d.host_id ';
        $join4 = 'host_sensor_reference e on a.id=e.host_id';
        $join5 = 'udp_sensor f on unhex(f.host_id) = e.sensor_id';
        $result = $this->field($field)->table('host')->alias('a')->join($join1, 'LEFT')->join($join2, 'LEFT')->join($join3, 'LEFT')
            ->join($join4, 'LEFT')->join($join5, 'LEFT')->where('a.id = unhex(\'' . $host_id . '\')')->find();
        if (!empty($result['mac'])) {
            $result['mac'] = substr($result['mac'], 0, 2) . '-' . substr($result['mac'], 2, 2) . '-' . substr($result['mac'], 4, 2) . '-' . substr($result['mac'], 6, 2) . '-' . substr($result['mac'], 8, 2) . '-' . substr($result['mac'], 10, 2);
        } else {
            $result['mac'] = '';
        }
        return $result;
    }

}

?>